---
import { type CollectionEntry, getCollection } from "astro:content";
import { getShowablePosts } from "@util/BlogHelper";
import BaseLayout from "@layouts/BaseLayout.astro";
import Button from "@components/Button.astro";
import { format } from "date-fns";

export const prerender = true;

export type Props = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const blog = await getCollection("blog", getShowablePosts);
  return blog.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const {
  data: { title, publishDate, description, authors, lastUpdated, cover, coverAlt, ...rest },
  render,
} = Astro.props;
const ogImage = cover
  ? {
      src: new URL(cover.src, Astro.site).toString(),
      alt: coverAlt || "Blog post cover image",
      type: cover.format,
    }
  : undefined;
//? Should I use `getEntries`
const tags = rest.tags.map(({ id }) => id);

const { Content } = await render();
---

<BaseLayout
  {title}
  navTitle={title}
  {description}
  {authors}
  {tags}
  {publishDate}
  {lastUpdated}
  {ogImage}
>
  <article id="stq-page-content" class="bs-container-md mb-8 mt-16 max-w-5xl grow scroll-mt-16">
    <section data-time-meta class="pb-5 text-sm text-gray-300 md:text-base">
      <p class="mb-2">
        Originally published on {format(publishDate, "MMMM do, yyyy")}
      </p>
      {
        lastUpdated && (
          <p class="mt-2 italic">Last Edited on {format(lastUpdated, "MMMM do, yyyy")}</p>
        )
      }
    </section>
    <section data-tag-list class="inline-flex flex-wrap gap-2 pb-5">
      {
        tags.map((val) => (
          <Button variant="info" href={`/tags/${val}`} class="px-2 py-1 leading-4">
            <span class="sr-only">Click or tap this tag to view other posts about</span>
            <strong> # {val}</strong>
          </Button>
        ))
      }
    </section>
    <section data-post-body class="prose prose-invert max-w-none grow lg:prose-xl">
      <h1 class="lg:!text-5xl">{title}</h1>
      <Content />
    </section>
  </article>
</BaseLayout>
