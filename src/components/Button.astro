---
import type { HTMLTag, Polymorphic } from "astro/types";

export type Props<Tag extends HTMLTag = HTMLTag> = Polymorphic<{ as: Tag }> & {
  variant?: string;
  disabled?: boolean;
  shape?: "pill" | "square" | "default";
};

const {
  as: Tag = "button" as any,
  variant = "primary",
  shape,
  class: className,
  role = "button",
  disabled,
  ...props
} = Astro.props;
---

<Tag
  {...props}
  {role}
  class:list={[
    "btn",
    `btn-${variant}`,
    { disabled },
    shape === "pill" && "rounded-full",
    shape === "square" && "rounded-none",
    className,
  ]}
>
  <slot />
</Tag>

<style>
  .btn {
    @apply inline-block select-none rounded-md border px-3 py-1.5 text-center align-middle leading-normal transition-colors duration-200 focus:outline-none focus:ring disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-70;
  }

  .btn-primary {
    @apply border-primary bg-primary text-black focus:ring-primary/60 hocus:border-primary-darker-10 hocus:bg-primary-darker-10 disabled:border-primary-lighter-10 disabled:bg-primary-lighter-10;
  }

  .btn-secondary {
    @apply border-secondary bg-secondary focus:ring-secondary/60 hocus:border-secondary-darker-10 hocus:bg-secondary-darker-10 disabled:border-secondary-lighter-10 disabled:bg-secondary-lighter-10;
  }

  .btn-accent {
    @apply border-accent bg-accent text-black focus:ring-accent/60 hocus:border-accent-darker-10 hocus:bg-accent-darker-10 disabled:border-accent-lighter-10 disabled:bg-accent-lighter-10;
  }
</style>
